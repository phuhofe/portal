import { Component, Input, Output, EventEmitter, ElementRef, NgZone } from '@angular/core';
// @ts-ignore
import { dispatchEditorEvents } from 'pintura';
export class PinturaEditorAbstractComponent {
    constructor(element, zone) {
        this.unsubs = [];
        this.src = undefined;
        this.options = undefined;
        this.loadstart = new EventEmitter();
        this.loaderror = new EventEmitter();
        this.loadprogress = new EventEmitter();
        this.load = new EventEmitter();
        this.processstart = new EventEmitter();
        this.processerror = new EventEmitter();
        this.processprogress = new EventEmitter();
        this.process = new EventEmitter();
        this.update = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.revert = new EventEmitter();
        this.destroy = new EventEmitter();
        this.show = new EventEmitter();
        this.hide = new EventEmitter();
        this.close = new EventEmitter();
        this.addshape = new EventEmitter();
        this.selectshape = new EventEmitter();
        this.updateshape = new EventEmitter();
        this.removeshape = new EventEmitter();
        this.routeEvent = (e) => {
            const emitter = this[e.type.split(':')[1]];
            if (!emitter)
                return;
            emitter.emit(e.detail);
        };
        this.element = element;
        this.zone = zone;
    }
    initEditor(element, props) {
        return undefined;
    }
    ngAfterViewInit() {
        this.element.nativeElement.classList.add('PinturaRootWrapper');
        // will block angular from listening to events inside the editor
        this.zone.runOutsideAngular(() => {
            this.editor = this.initEditor(this.element.nativeElement, Object.assign({}, this.options, { src: this.src }));
            this.unsubs = dispatchEditorEvents(this.editor, this.element.nativeElement);
        });
        // route events
        Object.keys(this)
            .filter((key) => this[key] instanceof EventEmitter)
            .forEach((key) => {
            this.element.nativeElement.addEventListener(`pintura:${key}`, this.routeEvent);
        });
    }
    ngOnChanges() {
        if (!this.editor)
            return;
        Object.assign(this.editor, this.options, { src: this.src });
    }
    ngOnDestroy() {
        if (!this.editor)
            return;
        this.editor.destroy();
        // unsubscribe
        this.unsubs.forEach((unsub) => unsub());
        this.unsubs = [];
        // unroute events
        Object.keys(this)
            .filter((key) => this[key] instanceof EventEmitter)
            .forEach((key) => {
            this.element.nativeElement.removeEventListener(`pintura:${key}`, this.routeEvent);
        });
        this.editor = undefined;
    }
    ngOnInit() { }
}
PinturaEditorAbstractComponent.decorators = [
    { type: Component, args: [{
                selector: 'pintura-editor',
                template: ` <ng-content></ng-content> `
            },] }
];
PinturaEditorAbstractComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
PinturaEditorAbstractComponent.propDecorators = {
    src: [{ type: Input }],
    options: [{ type: Input }],
    loadstart: [{ type: Output }],
    loaderror: [{ type: Output }],
    loadprogress: [{ type: Output }],
    load: [{ type: Output }],
    processstart: [{ type: Output }],
    processerror: [{ type: Output }],
    processprogress: [{ type: Output }],
    process: [{ type: Output }],
    update: [{ type: Output }],
    undo: [{ type: Output }],
    redo: [{ type: Output }],
    revert: [{ type: Output }],
    destroy: [{ type: Output }],
    show: [{ type: Output }],
    hide: [{ type: Output }],
    close: [{ type: Output }],
    addshape: [{ type: Output }],
    selectshape: [{ type: Output }],
    updateshape: [{ type: Output }],
    removeshape: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,